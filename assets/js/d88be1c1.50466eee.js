"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[8400],{158:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(6393);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=c(t),d=r,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||s;return t?i.createElement(m,o(o({ref:n},p),{},{components:t})):i.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[h]="string"==typeof e?e:r,o[1]=a;for(var c=2;c<s;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var i=t(9122),r=t(2501),s=(t(6393),t(158)),o=["components"],a={title:"version-policies.json"},l=void 0,c={unversionedId:"pages/configs/version-policies_json",id:"pages/configs/version-policies_json",title:"version-policies.json",description:"This is the template that rush init",source:"@site/docs/pages/configs/version-policies_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/version-policies_json",permalink:"/pages/configs/version-policies_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/configs/version-policies_json.md",tags:[],version:"current",frontMatter:{title:"version-policies.json"},sidebar:"docsSidebar",previous:{title:"rush-project.json (experimental)",permalink:"/pages/configs/rush-project_json"},next:{title:"Getting support",permalink:"/pages/help/support"}},p={},h=[],u={toc:h},d="wrapper";function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is the template that ",(0,s.kt)("a",{parentName:"p",href:"/pages/commands/rush_init"},"rush init"),"\ngenerates for ",(0,s.kt)("strong",{parentName:"p"},"version-policies.json"),":"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"common/config/rush/version-policies.json")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * This is configuration file is used for advanced publishing configurations with Rush.\n * More documentation is available on the Rush website: https://rushjs.io\n */\n\n/**\n * A list of version policy definitions.  A "version policy" is a custom package versioning\n * strategy that affects "rush change", "rush version", and "rush publish".  The strategy applies\n * to a set of projects that are specified using the "versionPolicyName" field in rush.json.\n */\n[\n  // {\n  //   /**\n  //    * (Required) Indicates the kind of version policy being defined ("lockStepVersion" or "individualVersion").\n  //    *\n  //    * The "lockStepVersion" mode specifies that the projects will use "lock-step versioning".  This\n  //    * strategy is appropriate for a set of packages that act as selectable components of a\n  //    * unified product.  The entire set of packages are always published together, and always share\n  //    * the same NPM version number.  When the packages depend on other packages in the set, the\n  //    * SemVer range is usually restricted to a single version.\n  //    */\n  //   "definitionName": "lockStepVersion",\n  //\n  //   /**\n  //    * (Required) The name that will be used for the "versionPolicyName" field in rush.json.\n  //    * This name is also used command-line parameters such as "--version-policy"\n  //    * and "--to-version-policy".\n  //    */\n  //   "policyName": "MyBigFramework",\n  //\n  //   /**\n  //    * (Required) The current version.  All packages belonging to the set should have this version\n  //    * in the current branch.  When bumping versions, Rush uses this to determine the next version.\n  //    * (The "version" field in package.json is NOT considered.)\n  //    */\n  //   "version": "1.0.0",\n  //\n  //   /**\n  //    * (Required) The type of bump that will be performed when publishing the next release.\n  //    * When creating a release branch in Git, this field should be updated according to the\n  //    * type of release.\n  //    *\n  //    * Valid values are: "prerelease", "release", "minor", "patch", "major"\n  //    */\n  //   "nextBump": "prerelease",\n  //\n  //   /**\n  //    * (Optional) If specified, all packages in the set share a common CHANGELOG.md file.\n  //    * This file is stored with the specified "main" project, which must be a member of the set.\n  //    *\n  //    * If this field is omitted, then a separate CHANGELOG.md file will be maintained for each\n  //    * package in the set.\n  //    */\n  //   "mainProject": "my-app",\n  //\n  //   /**\n  //    * (Optional) If enabled, the "rush change" command will prompt the user for their email address\n  //    * and include it in the JSON change files.  If an organization maintains multiple repos, tracking\n  //    * this contact information may be useful for a service that automatically upgrades packages and\n  //    * needs to notify engineers whose change may be responsible for a downstream build break.  It might\n  //    * also be useful for crediting contributors.  Rush itself does not do anything with the collected\n  //    * email addresses.  The default value is "false".\n  //    */\n  //   // "includeEmailInChangeFile": true\n  // },\n  //\n  // {\n  //   /**\n  //    * (Required) Indicates the kind of version policy being defined ("lockStepVersion" or "individualVersion").\n  //    *\n  //    * The "individualVersion" mode specifies that the projects will use "individual versioning".\n  //    * This is the typical NPM model where each package has an independent version number\n  //    * and CHANGELOG.md file.  Although a single CI definition is responsible for publishing the\n  //    * packages, they otherwise don\'t have any special relationship.  The version bumping will\n  //    * depend on how developers answer the "rush change" questions for each package that\n  //    * is changed.\n  //    */\n  //   "definitionName": "individualVersion",\n  //\n  //   "policyName": "MyRandomLibraries",\n  //\n  //   /**\n  //    * (Optional) This can be used to enforce that all packages in the set must share a common\n  //    * major version number, e.g. because they are from the same major release branch.\n  //    * It can also be used to discourage people from accidentally making "MAJOR" SemVer changes\n  //    * inappropriately.  The minor/patch version parts will be bumped independently according\n  //    * to the types of changes made to each project, according to the "rush change" command.\n  //    */\n  //   "lockedMajor": 3,\n  //\n  //   /**\n  //    * (Optional) When publishing is managed by Rush, by default the "rush change" command will\n  //    * request changes for any projects that are modified by a pull request. These change entries\n  //    * will produce a CHANGELOG.md file. If you author your CHANGELOG.md manually or announce updates\n  //    * in some other way, set "exemptFromRushChange" to true to tell "rush change" to ignore the projects\n  //    * belonging to this version policy.\n  //    */\n  //   "exemptFromRushChange": false,\n  //\n  //   // "includeEmailInChangeFile": true\n  // }\n];\n')))}m.isMDXComponent=!0}}]);