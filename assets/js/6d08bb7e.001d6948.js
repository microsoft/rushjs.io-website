"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[4599],{158:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var a=t(6393);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),l=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(m.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),u=o,p=d["".concat(m,".").concat(u)]||d[u]||h[u]||r;return t?a.createElement(p,s(s({ref:n},c),{},{components:t})):a.createElement(p,s({ref:n},c))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(9122),o=t(2501),r=(t(6393),t(158)),s=["components"],i={title:"command-line.json"},m=void 0,l={unversionedId:"pages/configs/command-line_json",id:"pages/configs/command-line_json",title:"command-line.json",description:"This is the template that rush init",source:"@site/docs/pages/configs/command-line_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/command-line_json",permalink:"/pages/configs/command-line_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/configs/command-line_json.md",tags:[],version:"current",frontMatter:{title:"command-line.json"},sidebar:"docsSidebar",previous:{title:"build-cache.json (experimental)",permalink:"/pages/configs/build-cache_json"},next:{title:"common-versions.json",permalink:"/pages/configs/common-versions_json"}},c={},d=[{value:"See also",id:"see-also",level:2}],h={toc:d},u="wrapper";function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)(u,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the template that ",(0,r.kt)("a",{parentName:"p",href:"/pages/commands/rush_init"},"rush init"),"\ngenerates for ",(0,r.kt)("strong",{parentName:"p"},"command-line.json"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"common/config/rush/command-line.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * This configuration file defines custom commands for the "rush" command-line.\n * More documentation is available on the Rush website: https://rushjs.io\n */\n{\n  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",\n\n  /**\n   * Custom "commands" introduce new verbs for the command-line.  To see the help for these\n   * example commands, try "rush --help", "rush my-bulk-command --help", or\n   * "rush my-global-command --help".\n   */\n  "commands": [\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom command.\n    //    * Rush\'s "bulk" commands are invoked separately for each project.  By default, the command will run for\n    //    * every project in the repo, according to the dependency graph (similar to how "rush build" works).\n    //    * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.\n    //    */\n    //   "commandKind": "bulk",\n    //\n    //   /**\n    //    * (Required) The name that will be typed as part of the command line.  This is also the name\n    //    * of the "scripts" hook in the project\'s package.json file (if "shellCommand" is not specified).\n    //    *\n    //    * The name should be comprised of lower case words separated by hyphens or colons. The name should include an\n    //    * English verb (e.g. "deploy"). Use a hyphen to separate words (e.g. "upload-docs"). A group of related commands\n    //    * can be prefixed with a colon (e.g. "docs:generate", "docs:deploy", "docs:serve", etc).\n    //    *\n    //    * Note that if the "rebuild" command is overridden here, it becomes separated from the "build" command\n    //    * and will call the "rebuild" script instead of the "build" script.\n    //    */\n    //   "name": "my-bulk-command",\n    //\n    //   /**\n    //    * (Required) A short summary of the custom command to be shown when printing command line\n    //    * help, e.g. "rush --help".\n    //    */\n    //   "summary": "Example bulk custom command",\n    //\n    //   /**\n    //    * A detailed description of the command to be shown when printing command line\n    //    * help (e.g. "rush --help my-command").\n    //    * If omitted, the "summary" text will be shown instead.\n    //    *\n    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful\n    //    * documentation can make a big difference for the developer experience in your repo.\n    //    */\n    //   "description": "This is an example custom command that runs separately for each project",\n    //\n    //   /**\n    //    * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously\n    //    * in the same repo folder.  (For example, it would be a mistake to run "rush install" and "rush build" at the\n    //    * same time.)  If your command makes sense to run concurrently with other operations,\n    //    * set "safeForSimultaneousRushProcesses" to true to disable this protection.\n    //    *\n    //    * In particular, this is needed for custom scripts that invoke other Rush commands.\n    //    */\n    //   "safeForSimultaneousRushProcesses": false,\n    //\n    //   /**\n    //    * (Optional) If the `shellCommand` field is set for a bulk command, Rush will invoke it for each\n    //    * selected project; otherwise, Rush will invoke the package.json `"scripts"` entry matching Rush command name.\n    //    *\n    //    * The string is the path to a script that will be invoked using the OS shell. The working directory will be\n    //    * the folder that contains rush.json.  If custom parameters are associated with this command, their\n    //    * values will be appended to the end of this string.\n    //    */\n    //   // "shellCommand": "node common/scripts/my-bulk-command.js",\n    //\n    //   /**\n    //    * (Required) If true, then this command is safe to be run in parallel, i.e. executed\n    //    * simultaneously for multiple projects.  Similar to "rush build", regardless of parallelism\n    //    * projects will not start processing until their dependencies have completed processing.\n    //    */\n    //   "enableParallelism": false,\n    //\n    //   /**\n    //    * Normally projects will be processed according to their dependency order: a given project will not start\n    //    * processing the command until all of its dependencies have completed.  This restriction doesn\'t apply for\n    //    * certain operations, for example a "clean" task that deletes output files.  In this case\n    //    * you can set "ignoreDependencyOrder" to true to increase parallelism.\n    //    */\n    //   "ignoreDependencyOrder": false,\n    //\n    //   /**\n    //    * Normally Rush requires that each project\'s package.json has a "scripts" entry matching\n    //    * the custom command name.  To disable this check, set "ignoreMissingScript" to true;\n    //    * projects with a missing definition will be skipped.\n    //    */\n    //   "ignoreMissingScript": false,\n    //\n    //   /**\n    //    * When invoking shell scripts, Rush uses a heuristic to distinguish errors from warnings:\n    //    * - If the shell script returns a nonzero process exit code, Rush interprets this as "one or more errors".\n    //    * Error output is displayed in red, and it prevents Rush from attempting to process any downstream projects.\n    //    * - If the shell script returns a zero process exit code but writes something to its stderr stream,\n    //    * Rush interprets this as "one or more warnings". Warning output is printed in yellow, but does NOT prevent\n    //    * Rush from processing downstream projects.\n    //    *\n    //    * Thus, warnings do not interfere with local development, but they will cause a CI job to fail, because\n    //    * the Rush process itself returns a nonzero exit code if there are any warnings or errors. This is by design.\n    //    * In an active monorepo, we\'ve found that if you allow any warnings in your main branch, it inadvertently\n    //    * teaches developers to ignore warnings, which quickly leads to a situation where so many "expected" warnings\n    //    * have accumulated that warnings no longer serve any useful purpose.\n    //    *\n    //    * Sometimes a poorly behaved task will write output to stderr even though its operation was successful.\n    //    * In that case, it\'s strongly recommended to fix the task.  However, as a workaround you can set\n    //    * allowWarningsInSuccessfulBuild=true, which causes Rush to return a nonzero exit code for errors only.\n    //    *\n    //    * Note: The default value is false. In Rush 5.7.x and earlier, the default value was true.\n    //    */\n    //   "allowWarningsInSuccessfulBuild": false,\n    //\n    //   /**\n    //    * If true then this command will be incremental like the built-in "build" command\n    //    */\n    //   "incremental": false,\n    //\n    //   /**\n    //    * (EXPERIMENTAL) Normally Rush terminates after the command finishes. If this option is set to "true" Rush\n    //    * will instead enter a loop where it watches the file system for changes to the selected projects. Whenever a\n    //    * change is detected, the command will be invoked again for the changed project and any selected projects that\n    //    * directly or indirectly depend on it.\n    //    *\n    //    * For details, refer to the website article "Using watch mode".\n    //    */\n    //   "watchForChanges": false,\n    //\n    //   /**\n    //    * (EXPERIMENTAL) Disable cache for this action. This may be useful if this command affects state outside of\n    //    * projects\' own folders.\n    //    */\n    //   "disableBuildCache": false\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom command.\n    //    * Rush\'s "global" commands are invoked once for the entire repo.\n    //    */\n    //   "commandKind": "global",\n    //\n    //   "name": "my-global-command",\n    //   "summary": "Example global custom command",\n    //   "description": "This is an example custom command that runs once for the entire repo",\n    //\n    //   "safeForSimultaneousRushProcesses": false,\n    //\n    //   /**\n    //    * (Required) A script that will be invoked using the OS shell. The working directory will be\n    //    * the folder that contains rush.json.  If custom parameters are associated with this command, their\n    //    * values will be appended to the end of this string.\n    //    */\n    //   "shellCommand": "node common/scripts/my-global-command.js",\n    //\n    //   /**\n    //    * If your "shellCommand" script depends on NPM packages, the recommended best practice is\n    //    * to make it into a regular Rush project that builds using your normal toolchain.  In cases where\n    //    * the command needs to work without first having to run "rush build", the recommended practice\n    //    * is to publish the project to an NPM registry and use common/scripts/install-run.js to launch it.\n    //    *\n    //    * Autoinstallers offer another possibility: They are folders under "common/autoinstallers" with\n    //    * a package.json file and shrinkwrap file. Rush will automatically invoke the package manager to\n    //    * install these dependencies before an associated command is invoked.  Autoinstallers have the\n    //    * advantage that they work even in a branch where "rush install" is broken, which makes them a\n    //    * good solution for Git hook scripts.  But they have the disadvantages of not being buildable\n    //    * projects, and of increasing the overall installation footprint for your monorepo.\n    //    *\n    //    * The "autoinstallerName" setting must not contain a path and must be a valid NPM package name.\n    //    * For example, the name "my-task" would map to "common/autoinstallers/my-task/package.json", and\n    //    * the "common/autoinstallers/my-task/node_modules/.bin" folder would be added to the shell PATH when\n    //    * invoking the "shellCommand".\n    //    */\n    //   // "autoinstallerName": "my-task"\n    // }\n  ],\n\n  /**\n   * Custom "parameters" introduce new parameters for specified Rush command-line commands.\n   * For example, you might define a "--production" parameter for the "rush build" command.\n   */\n  "parameters": [\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.\n    //    */\n    //   "parameterKind": "flag",\n    //\n    //   /**\n    //    * (Required) The long name of the parameter.  It must be lower-case and use dash delimiters.\n    //    */\n    //   "longName": "--my-flag",\n    //\n    //   /**\n    //    * An optional alternative short name for the parameter.  It must be a dash followed by a single\n    //    * lower-case or upper-case letter, which is case-sensitive.\n    //    *\n    //    * NOTE: The Rush developers recommend that automation scripts should always use the long name\n    //    * to improve readability.  The short name is only intended as a convenience for humans.\n    //    * The alphabet letters run out quickly, and are difficult to memorize, so *only* use\n    //    * a short name if you expect the parameter to be needed very often in everyday operations.\n    //    */\n    //   "shortName": "-m",\n    //\n    //   /**\n    //    * (Required) A long description to be shown in the command-line help.\n    //    *\n    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful\n    //    * documentation can make a big difference for the developer experience in your repo.\n    //    */\n    //   "description": "A custom flag parameter that is passed to the scripts that are invoked when building projects",\n    //\n    //   /**\n    //    * (Required) A list of custom commands and/or built-in Rush commands that this parameter may\n    //    * be used with.  The parameter will be appended to the shell command that Rush invokes.\n    //    */\n    //   "associatedCommands": ["build", "rebuild"]\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * A "string" is a custom command-line parameter whose argument is a single text string.\n    //    */\n    //   "parameterKind": "string",\n    //   "longName": "--my-string",\n    //   "description": "A custom string parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //\n    //   "argumentName": "SOME_TEXT",\n    //\n    //   /**\n    //    * If true, this parameter must be included with the command.  The default is false.\n    //    */\n    //   "required": false\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * A "choice" is a custom command-line parameter whose argument must be chosen from a list of\n    //    * allowable alternatives (similar to an enum).\n    //    */\n    //   "parameterKind": "choice",\n    //   "longName": "--my-choice",\n    //   "description": "A custom choice parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //   "required": false,\n    //\n    //   /**\n    //    * If a "defaultValue" is specified, then if the Rush command line is invoked without\n    //    * this parameter, it will be automatically added with the "defaultValue" as the argument.\n    //    * The value must be one of the defined alternatives.\n    //    */\n    //   "defaultValue": "vanilla",\n    //\n    //   /**\n    //    * (Required) A list of alternative argument values that can be chosen for this parameter.\n    //    */\n    //   "alternatives": [\n    //     {\n    //       /**\n    //        * A token that is one of the alternatives that can be used with the choice parameter,\n    //        * e.g. "vanilla" in "--flavor vanilla".\n    //        */\n    //       "name": "vanilla",\n    //\n    //       /**\n    //        * A detailed description for the alternative that can be shown in the command-line help.\n    //        *\n    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful\n    //        * documentation can make a big difference for the developer experience in your repo.\n    //        */\n    //       "description": "Use the vanilla flavor"\n    //     },\n    //\n    //     {\n    //       "name": "chocolate",\n    //       "description": "Use the chocolate flavor"\n    //     },\n    //\n    //     {\n    //       "name": "strawberry",\n    //       "description": "Use the strawberry flavor"\n    //     }\n    //   ]\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * An "integer" is a custom command-line parameter whose value is an integer number.\n    //    */\n    //   "parameterKind": "integer",\n    //   "longName": "--my-integer",\n    //   "description": "A custom integer parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //   "argumentName": "SOME_NUMBER",\n    //   "required": false\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * An "integerList" is a custom command-line parameter whose argument is an integer.\n    //    * The parameter can be specified multiple times to build a list.\n    //    *\n    //    * For example, if the parameter name is "--my-integer-list", then the custom command\n    //    * might be invoked as\n    //    * `rush my-global-command --my-integer-list 1 --my-integer-list 2 --my-integer-list 3`\n    //    * and the parsed array would be [1,2,3].\n    //    */\n    //   "parameterKind": "integerList",\n    //   "longName": "--my-integer-list",\n    //   "description": "A custom integer list parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //   "argumentName": "SOME_NUMBER",\n    //   "required": false\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * An "stringList" is a custom command-line parameter whose argument is a text string.\n    //    * The parameter can be specified multiple times to build a list.\n    //    *\n    //    * For example, if the parameter name is "--my-string-list", then the custom command\n    //    * might be invoked as\n    //    * `rush my-global-command --my-string-list A --my-string-list B --my-string-list C`\n    //    * and the parsed array would be [A,B,C].\n    //    */\n    //   "parameterKind": "stringList",\n    //   "longName": "--my-string-list",\n    //   "description": "A custom string list parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //   "argumentName": "SOME_TEXT",\n    //   "required": false\n    // },\n    //\n    // {\n    //   /**\n    //    * (Required) Determines the type of custom parameter.\n    //    * A "choice" is a custom command-line parameter whose argument must be chosen from a list of\n    //    * allowable alternatives (similar to an enum).\n    //    * The parameter can be specified multiple times to build a list.\n    //    *\n    //    * For example, if the parameter name is "--my-choice-list", then the custom command\n    //    * might be invoked as\n    //    * `rush my-global-command --my-string-list vanilla --my-string-list chocolate`\n    //    * and the parsed array would be [vanilla,chocolate].\n    //    */\n    //   "parameterKind": "choiceList",\n    //   "longName": "--my-choice-list",\n    //   "description": "A custom choice list parameter for the \\"my-global-command\\" custom command",\n    //\n    //   "associatedCommands": ["my-global-command"],\n    //   "required": false,\n    //\n    //   /**\n    //    * (Required) A list of alternative argument values that can be chosen for this parameter.\n    //    */\n    //   "alternatives": [\n    //     {\n    //       /**\n    //        * A token that is one of the alternatives that can be used with the choice parameter,\n    //        * e.g. "vanilla" in "--flavor vanilla".\n    //        */\n    //       "name": "vanilla",\n    //\n    //       /**\n    //        * A detailed description for the alternative that can be shown in the command-line help.\n    //        *\n    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful\n    //        * documentation can make a big difference for the developer experience in your repo.\n    //        */\n    //       "description": "Use the vanilla flavor"\n    //     },\n    //\n    //     {\n    //       "name": "chocolate",\n    //       "description": "Use the chocolate flavor"\n    //     },\n    //\n    //     {\n    //       "name": "strawberry",\n    //       "description": "Use the strawberry flavor"\n    //     }\n    //   ]\n    // }\n  ]\n}\n')),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/pages/maintainer/custom_commands"},"Custom commands"))))}p.isMDXComponent=!0}}]);