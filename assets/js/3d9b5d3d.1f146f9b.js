"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[3034],{158:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(6393);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),u=i,g=c["".concat(l,".").concat(u)]||c[u]||h[u]||r;return n?o.createElement(g,a(a({ref:t},p),{},{components:n})):o.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var m=2;m<r;m++)a[m]=n[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>m,toc:()=>c});var o=n(9122),i=n(2501),r=(n(6393),n(158)),a=["components"],s={title:"Installing Git hooks"},l=void 0,m={unversionedId:"pages/maintainer/git_hooks",id:"pages/maintainer/git_hooks",title:"Installing Git hooks",description:"The Git version control system allows you to configure hook scripts that will be invoked whenever certain actions",source:"@site/docs/pages/maintainer/git_hooks.md",sourceDirName:"pages/maintainer",slug:"/pages/maintainer/git_hooks",permalink:"/pages/maintainer/git_hooks",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/maintainer/git_hooks.md",tags:[],version:"current",frontMatter:{title:"Installing Git hooks"},sidebar:"docsSidebar",previous:{title:"Enabling policies",permalink:"/pages/maintainer/setup_policies"},next:{title:"Enabling Prettier",permalink:"/pages/maintainer/enabling_prettier"}},p={},c=[{value:"Configuring Rush to install a Git hook script",id:"configuring-rush-to-install-a-git-hook-script",level:2},{value:"Invoking Prettier during &quot;git commit&quot;",id:"invoking-prettier-during-git-commit",level:2}],h={toc:c},u="wrapper";function g(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Git version control system allows you to configure hook scripts that will be invoked whenever certain actions\nare performed. (See Git's ",(0,r.kt)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"},"Customizing Git")," chapter\nfor complete documentation.) The basic idea is that you create shell scripts with well-known names such as\n",(0,r.kt)("strong",{parentName:"p"},"pre-commit"),", ",(0,r.kt)("strong",{parentName:"p"},"post-update"),", ",(0,r.kt)("strong",{parentName:"p"},"prepare-commit-msg"),", and so forth. If the Git client finds these scripts\nin the local ",(0,r.kt)("strong",{parentName:"p"},".git/hooks")," folder, it will run the scripts whenever the corresponding operations are performed."),(0,r.kt)("p",null,"For security reasons, Git will not automatically install these scripts when you clone a repo. Instead, each\ndeveloper must invoke a command that creates the files and chmods them to be executable. Rush can automate\nthis for you!"),(0,r.kt)("h2",{id:"configuring-rush-to-install-a-git-hook-script"},"Configuring Rush to install a Git hook script"),(0,r.kt)("p",null,"As an example, suppose we find that developers are making commits without a meaningful description of their work.\nAs a result, the Git history is difficult to understand. To solve this problem, might want to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"commit-msg"),"\nhook that requires the commit message to meet certain requirements. For example, here's a simple Bash script that\nrequires at least 3 words of text:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"common/git-hooks/commit-msg")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n#\n# This is an example Git hook for use with Rush.  To enable this hook, rename this file\n# to "commit-msg" and then run "rush install", which will copy it from common/git-hooks\n# to the .git/hooks folder.\n#\n# TO LEARN MORE ABOUT GIT HOOKS\n#\n# The Git documentation is here: https://git-scm.com/githooks\n# Some helpful resources: https://githooks.com\n#\n# ABOUT THIS EXAMPLE\n#\n# The commit-msg hook is called by "git commit" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero status after issuing\n# an appropriate message if it wants to stop the commit.  The hook is allowed to edit\n# the commit message file.\n\n# This example enforces that commit message should contain a minimum amount of\n# description text.\nif [ `cat $1 | wc -w` -lt 3 ]; then\n  echo ""\n  echo "Invalid commit message: The message must contain at least 3 words."\n    exit 1\nfi\n')),(0,r.kt)("p",null,"The sample file shown above is a template that ",(0,r.kt)("inlineCode",{parentName:"p"},"rush init")," generates when setting up a new repo.\nYou can probably find a copy as\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rush-example/blob/main/common/git-hooks/commit-msg.sample"},"common/git-hooks/commit-msg.sample"),"\nin your own repo."),(0,r.kt)("p",null,"You would use it as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add this file in your ",(0,r.kt)("strong",{parentName:"li"},"common/git-hooks")," folder, and commit to Git."),(0,r.kt)("li",{parentName:"ol"},"When a developer runs ",(0,r.kt)("inlineCode",{parentName:"li"},"rush install"),", Rush will copy this file to be ",(0,r.kt)("strong",{parentName:"li"},".git/hooks/commit-msg")),(0,r.kt)("li",{parentName:"ol"},"When you run ",(0,r.kt)("inlineCode",{parentName:"li"},"git commit"),", Git will find the script and invoke it"),(0,r.kt)("li",{parentName:"ol"},"If the commit message is too short, the script returns a nonzero exit code; Git shows the\n",(0,r.kt)("inlineCode",{parentName:"li"},"Invalid commit message")," notice and rejects the operation.")),(0,r.kt)("p",null,"Using Rush to install the hook script avoids the need for a separate solution such as the popular\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/husky"},"Husky")," package. Note that Husky expects your repo to have a\nroot-level ",(0,r.kt)("strong",{parentName:"p"},"package.json")," and ",(0,r.kt)("strong",{parentName:"p"},"node_modules")," folder, and Husky runs shell commands for every Git operation\n(even unused hooks); using Rush to install hooks avoids those limitations."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," If you need to uninstall the hooks for some reason, it is safe to delete the files\nin your ",(0,r.kt)("strong",{parentName:"p"},".git/hooks/")," folder.")),(0,r.kt)("h2",{id:"invoking-prettier-during-git-commit"},'Invoking Prettier during "git commit"'),(0,r.kt)("p",null,"The Prettier tool ensures that source files follow consistent conventions for syntax issues like spacing and commas.\nBy configuring a ",(0,r.kt)("inlineCode",{parentName:"p"},"git commit")," hook to invoke Prettier automatically, you can apply these fixes without any effort\non the developer's part."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/pages/maintainer/enabling_prettier"},"Enabling Prettier")," article provides step-by-step instructions."))}g.isMDXComponent=!0}}]);