"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[6218],{158:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var s=t(6393);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=s.createContext({}),p=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return s.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(t),h=i,f=c["".concat(l,".").concat(h)]||c[h]||m[h]||o;return t?s.createElement(f,a(a({ref:n},u),{},{components:t})):s.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:i,a[1]=r;for(var p=2;p<o;p++)a[p]=t[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}h.displayName="MDXCreateElement"},44:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var s=t(9122),i=t(2501),o=(t(6393),t(158)),a=["components"],r={title:"rush-plugin-manifest.json (experimental)"},l=void 0,p={unversionedId:"pages/configs/rush-plugin-manifest_json",id:"pages/configs/rush-plugin-manifest_json",title:"rush-plugin-manifest.json (experimental)",description:"This is the template for the rush-plugin-manifest.json file that is used when",source:"@site/docs/pages/configs/rush-plugin-manifest_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/rush-plugin-manifest_json",permalink:"/pages/configs/rush-plugin-manifest_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/configs/rush-plugin-manifest_json.md",tags:[],version:"current",frontMatter:{title:"rush-plugin-manifest.json (experimental)"},sidebar:"docsSidebar",previous:{title:"rush.json",permalink:"/pages/configs/rush_json"},next:{title:"rush-plugins.json (experimental)",permalink:"/pages/configs/rush-plugins_json"}},u={},c=[{value:"See also",id:"see-also",level:2}],m={toc:c},h="wrapper";function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)(h,(0,s.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is the template for the ",(0,o.kt)("strong",{parentName:"p"},"rush-plugin-manifest.json")," file that is used when\n",(0,o.kt)("a",{parentName:"p",href:"/pages/extensibility/creating_plugins"},"creating a Rush plugin"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"<","your plugin project",">","/rush-plugin-manifest.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * This file defines the Rush plugins that are provided by this package.\n */\n{\n  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush-plugin-manifest.schema.json",\n\n  /**\n   * An array of one or more plugin definitions provided by this NPM package.\n   *\n   * For more granular installations, it is recommended for plugins to be implemented by an\n   * NPM package that does try to serve other roles such as providing APIs or command-line binaries.\n   * The package name should start with "rush-".  The name should end with "-plugin" or "-plugins".\n   * For example: "@scope/rush-business-policy-plugin"\n   */\n  "plugins": [\n    {\n      /**\n       * (Required) The name of the plugin.  The plugin name must be comprised of letters and numbers\n       * forming one or more words that are separated by hyphens.  Note that if the plugin has a\n       * JSON config file, that filename will be the same as the plugin name.  See "optionsSchema" below\n       * for details.\n       *\n       * If the manifest defines exactly one plugin, then it is suggested to reuse the name from the\n       * NPM package.  For example, if the NPM package is "@scope/rush-business-policy-plugin"\n       * then the plugin name might be "business-policy" and with config file "business-policy.json".\n       */\n      "pluginName": "example",\n\n      /**\n       * (Required) Provide some documentation that summarizes the problem solved by this plugin,\n       * how to invoke it, and what operations it performs.\n       */\n      "description": "An example plugin",\n\n      /**\n       * (Optional) A path to a JavaScript code module that implements the "IRushPlugin" interface.\n       * This module can use the "@rushstack/rush-sdk" API to register handlers for Rush events\n       * and services.  The module path is relative to the folder containing the "package.json" file.\n       */\n      // "entryPoint": "lib/example/RushExamplePlugin.js",\n\n      /**\n       * (Optional) A path to a "command-line.json" file that defines Rush command line actions\n       * and parameters contributed by this plugin.  This config file has the same JSON schema\n       * as Rush\'s "common/config/rush/command-line.json" file.\n       */\n      // "commandLineJsonFilePath": "lib/example/command-line.json",\n\n      /**\n       * (Optional) A path to a JSON schema for validating the config file that end users can\n       * create to customize this plugin\'s behavior.  Plugin config files are stored in the folder\n       * "common/config/rush-plugins/" with a filename corresponding to the "pluginName" field\n       * from the manifest.  For example: "common/config/rush-plugins/business-policy.json"\n       * whose schema is "business-policy.schema.json".\n       */\n      // "optionsSchema": "lib/example/example.schema.json",\n\n      /**\n       * (Optional) A list of associated Rush command names such as "build" from "rush build".\n       * If specified, then the plugin\'s "entryPoint" code module be loaded only if\n       * one of the specified commands is invoked.  This improves performance by avoiding\n       * loading the code module when it is not needed.  If "associatedCommands" is\n       * not specified, then the code module will always be loaded.\n       */\n      // "associatedCommands": [ "build" ]\n    }\n  ]\n}\n')),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/extensibility/creating_plugins"},"Creating a Rush plugin")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/maintainer/using_rush_plugins"},"Using Rush plugins"))))}f.isMDXComponent=!0}}]);