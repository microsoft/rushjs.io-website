"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[3060],{158:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(9122),r=n(2501),i=(n(6393),n(158)),o=["components"],l={title:"Enabling Prettier"},s=void 0,p={unversionedId:"pages/maintainer/enabling_prettier",id:"pages/maintainer/enabling_prettier",title:"Enabling Prettier",description:"The Rush Stack lint strategy recommends the",source:"@site/docs/pages/maintainer/enabling_prettier.md",sourceDirName:"pages/maintainer",slug:"/pages/maintainer/enabling_prettier",permalink:"/pages/maintainer/enabling_prettier",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/maintainer/enabling_prettier.md",tags:[],version:"current",frontMatter:{title:"Enabling Prettier"},sidebar:"docsSidebar",previous:{title:"Installing Git hooks",permalink:"/pages/maintainer/git_hooks"},next:{title:"Custom commands",permalink:"/pages/maintainer/custom_commands"}},m={},u=[{value:"Preparing for Prettier",id:"preparing-for-prettier",level:2},{value:"Git hook requirements",id:"git-hook-requirements",level:2},{value:"Enabling the Git hook",id:"enabling-the-git-hook",level:2},{value:"Installing prettier plugins",id:"installing-prettier-plugins",level:2}],c={toc:u},h="wrapper";function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Rush Stack ",(0,i.kt)("a",{parentName:"p",href:"https://rushstack.io/pages/heft_tasks/eslint/"},"lint strategy")," recommends the\n",(0,i.kt)("a",{parentName:"p",href:"https://prettier.io/"},"Prettier")," tool for ensuring consistent syntax across all source files. With this\napproach, ESLint and Prettier have complementary roles:"),(0,i.kt)("p",null,"Recommended ESLint usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ESLint enforces a set of rules for coding conventions.",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"li"},'Example: "Function names should be capitalized with camelCase."')),(0,i.kt)("li",{parentName:"ul"},"Fixing these issues can break tests or API contracts. ESLint can cause build errors."),(0,i.kt)("li",{parentName:"ul"},"Rules are highly customizable -- different projects may require different rules."),(0,i.kt)("li",{parentName:"ul"},"Thus, we recommend to invoke ESLint separately for each project folder, as part of building that project.")),(0,i.kt)("p",null,"Recommended Prettier usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Prettier normalizes syntax formatting.",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"li"},"Example: indentation and comma placement")),(0,i.kt)("li",{parentName:"ul"},"Fixing these issues should never affect the meaning of the code. Prettier can be run automatically and invisibly."),(0,i.kt)("li",{parentName:"ul"},"Prettier discourages customization -- one convention is good enough for the entire repo, if not the entire world."),(0,i.kt)("li",{parentName:"ul"},"Thus, we recommend applying Prettier globally for the entire repo.")),(0,i.kt)("p",null,"In this article we'll show how to configure Prettier to run automatically during ",(0,i.kt)("inlineCode",{parentName:"p"},"git commit"),".\nWe also suggest for developers to install the\n",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"},"Prettier extension for VS Code"),",\nwhich formats files automatically whenever you save."),(0,i.kt)("h2",{id:"preparing-for-prettier"},"Preparing for Prettier"),(0,i.kt)("p",null,"Before we get to the Git hook, first we need to configure Prettier, and get your existing files prettified."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Since Prettier will run for all files, its ",(0,i.kt)("a",{parentName:"p",href:"https://prettier.io/docs/en/configuration.html"},"config file")," goes\nat the root of the repo. Prettier allows many different names for this config file, but despite all that\nflexibility its JSON parser rejects code comments. Therefore it's recommended to use the ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," file extension."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"<","repo root",">","/.prettierrc.js")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Documentation for this file: https://prettier.io/en/configuration.html\nmodule.exports = {\n  // We use a larger print width because Prettier's word-wrapping seems to be tuned\n  // for plain JavaScript without type annotations\n  printWidth: 110,\n\n  // Use .gitattributes to manage newlines\n  endOfLine: 'auto',\n\n  // Use single quotes instead of double quotes\n  singleQuote: true,\n\n  // For ES5, trailing commas cannot be used in function parameters; it is counterintuitive\n  // to use them for arrays only\n  trailingComma: 'none'\n};\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You also need to make a ",(0,i.kt)("inlineCode",{parentName:"p"},".prettierignore")," file to tell Prettier which files to skip. Note that the Git hook\nwill implicitly filter any files that are not committed to Git, however this is not the case for other tools\nsuch as the\n",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"},"Prettier extension for VS Code"),".\nIt is recommended to for ",(0,i.kt)("inlineCode",{parentName:"p"},".prettierignore")," to extend the same patterns used in ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore"),", like this:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"<","repo root",">","/.prettierignore")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#-------------------------------------------------------------------------------------------------------------------\n# Keep this section in sync with .gitignore\n#-------------------------------------------------------------------------------------------------------------------\n\n\ud83d\udc4b (copy + paste your .gitignore file contents here) \ud83d\udc4b\n\n#-------------------------------------------------------------------------------------------------------------------\n# Prettier-specific overrides\n#-------------------------------------------------------------------------------------------------------------------\n\n# Rush files\ncommon/changes/\ncommon/scripts/\ncommon/config/\nCHANGELOG.*\n\n# Package manager files\npnpm-lock.yaml\nyarn.lock\npackage-lock.json\nshrinkwrap.json\n\n# Build outputs\ndist\nlib\n\n# Prettier reformats code blocks inside Markdown, which affects rendered output\n*.md\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once the configuration is set up, next we need to invoke Prettier manually to reformat all the existing\nsource files. You can fine-tune your ",(0,i.kt)("inlineCode",{parentName:"p"},".prettierignore")," configuration by examining the Git diff after\nperforming this command."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Install prettier so you can invoke it manually\nnpm install --global prettier\n\n# Run these commands from your repo root, since "." below refers to the current folder\ncd my-repo\n\n# See what files Prettier will operate on; use this to tune your .prettierignore rules\nprettier . --list-different\n\n# When you are ready, this will bulk fix all existing source files in your repo\nprettier . --write\n')))),(0,i.kt)("p",null,"The first time you run Prettier, it may produce a very large diff if you already have many files in your repo.\nIn that case it's a good idea to merge a PR with just those changes. That will make it easier to review the\nPR for the next steps below."),(0,i.kt)("h2",{id:"git-hook-requirements"},"Git hook requirements"),(0,i.kt)("p",null,"Let's set up a ",(0,i.kt)("a",{parentName:"p",href:"/pages/maintainer/git_hooks"},"Git hook")," that will invoke Prettier automatically\nwhenever changes are committed."),(0,i.kt)("p",null,"Keep in mind that the ",(0,i.kt)("inlineCode",{parentName:"p"},"git commit")," command is a core operation that must always be quick and reliable:\nDevelopers may want to make commits to their branch without running ",(0,i.kt)("inlineCode",{parentName:"p"},"rush install")," first. In some situations\n",(0,i.kt)("inlineCode",{parentName:"p"},"rush install")," cannot be run, because the branch may be in a partially working state. It seems that our Git hook\nshould NOT rely on the usual monorepo installation mechanism."),(0,i.kt)("p",null,"We could solve this by using Rush's ",(0,i.kt)("a",{parentName:"p",href:"/pages/maintainer/enabling_ci_builds"},"install-run.js"),"\nscript to install the Prettier package on demand. But it turns out that we need to install several dependencies\ntogether:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pretty-quick"),": To speed up the operation, we'll use ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/pretty-quick"},"pretty-quick"),"\nto calculate the subset of files that are staged for commit. Only those files need to processed.\nPrettier cannot do this part, because it doesn't interface with Git."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prettier"),": The ",(0,i.kt)("inlineCode",{parentName:"li"},"pretty-quick")," tools has a peer dependency on Prettier's package."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"optional plugins:")," If you use any plugins for Prettier, they need to be resolvable by the ",(0,i.kt)("inlineCode",{parentName:"li"},"prettier")," package.")),(0,i.kt)("p",null,'For this situation, Rush\'s "autoinstaller" feature provides a convenient alternative to ',(0,i.kt)("strong",{parentName:"p"},"install-run.js"),"."),(0,i.kt)("h2",{id:"enabling-the-git-hook"},"Enabling the Git hook"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"First, use the ",(0,i.kt)("a",{parentName:"p",href:"/pages/commands/rush_init-autoinstaller"},"rush init-autoinstaller")," command to\ncreate an autoinstaller:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# This creates the common/autoinstallers/rush-prettier/package.json file:\nrush init-autoinstaller --name rush-prettier\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the dependencies and create the ",(0,i.kt)("strong",{parentName:"p"},"pnpm-lock.yaml")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd common/autoinstallers/rush-prettier\n\n# Instead of running these commands, you could instead manually edit the\n# "dependencies" in the package.json file\npnpm install prettier\npnpm install pretty-quick\n\n# (If you need plugins, install them as well)\n\n# When you are finished, run this command to ensure that the\n# common/autoinstallers/rush-prettier/ppnpm-lock.yaml file is up to date\nrush update-autoinstaller --name rush-prettier\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should now have two files ",(0,i.kt)("strong",{parentName:"p"},"package.json")," and ",(0,i.kt)("strong",{parentName:"p"},"pnpm-lock.yaml")," in your\n",(0,i.kt)("strong",{parentName:"p"},"common/autoinstallers/rush-prettier")," folder. Add them to Git and commit them."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git add package.json\ngit add pnpm-lock.yaml\ngit commit -m "Create rush-prettier autoinstaller"\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Next, we will create a ",(0,i.kt)("inlineCode",{parentName:"p"},"rush prettier")," custom command that invokes the ",(0,i.kt)("inlineCode",{parentName:"p"},"pretty-quick")," tool.\nAdd this to the ",(0,i.kt)("inlineCode",{parentName:"p"},'"commands"')," section of your ",(0,i.kt)("strong",{parentName:"p"},"command-line.json")," file:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"common/config/rush/command-line.json")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  . . .\n  "commands": [\n    {\n      "name": "prettier",\n      "commandKind": "global",\n      "summary": "Used by the pre-commit Git hook. This command invokes Prettier to reformat staged changes.",\n      "safeForSimultaneousRushProcesses": true,\n\n      "autoinstallerName": "rush-prettier",\n\n      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick\n      "shellCommand": "pretty-quick --staged"\n    }\n    . . .\n')),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},'"autoinstallerName": "rush-prettier"')," line ensures that our autoinstaller will install Prettier\nbefore the shell command is invoked. The shell command ",(0,i.kt)("inlineCode",{parentName:"p"},"pretty-quick --staged")," will be invoked\nin the ",(0,i.kt)("strong",{parentName:"p"},"common/autoinstallers/rush-prettier")," folder.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"After saving these changes, let's test our custom command by running ",(0,i.kt)("inlineCode",{parentName:"p"},"rush prettier"),". The first time you should\nsee Rush automatically performing a number of steps: (1) install the correct version of the Rush engine,\n(2) install the correct version of the PNPM package manager, (3) installing ",(0,i.kt)("strong",{parentName:"p"},"rush-prettier/package.json"),"\nand its dependencies, (4) invoking ",(0,i.kt)("inlineCode",{parentName:"p"},"pretty-quick --staged"),". However the second time you invoke it, the first\n3 steps are up to date, so step (4) runs without any delay. Nice!"),(0,i.kt)("p",{parentName:"li"},"Because ",(0,i.kt)("inlineCode",{parentName:"p"},"rush prettier")," only processes files that are staged for commit, the report will most likely show:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Found 0 changed files.\nEverything is awesome!\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The last step is to add a Git hook that invokes ",(0,i.kt)("inlineCode",{parentName:"p"},"rush prettier")," automatically whenever ",(0,i.kt)("inlineCode",{parentName:"p"},"git commit")," is performed.\nTo do this, create a file called ",(0,i.kt)("strong",{parentName:"p"},"pre-commit")," in the ",(0,i.kt)("strong",{parentName:"p"},"common/git-hooks")," folder:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"common/git-hooks/pre-commit")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'#!/bin/sh\n# Called by "git commit" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n\n# Invoke the "rush prettier" custom command to reformat files whenever they\n# are committed. The command is defined in common/config/rush/command-line.json\n# and uses the "rush-prettier" autoinstaller.\nnode common/scripts/install-run-rush.js prettier || exit $?\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make the file executable: ",(0,i.kt)("inlineCode",{parentName:"p"},"chmod +x pre-commit"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"To actually install the hook, run ",(0,i.kt)("inlineCode",{parentName:"p"},"rush install"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Before finally merging your PR, you may want to run ",(0,i.kt)("inlineCode",{parentName:"p"},"prettier . --write")," one last time to reformat any files\nthat may have been modified before we installed the hook."))),(0,i.kt)("p",null,"You're done! Whenever changes are committed to Git, they will now be automatically prettified."),(0,i.kt)("h2",{id:"installing-prettier-plugins"},"Installing prettier plugins"),(0,i.kt)("p",null,"Prettier supports ",(0,i.kt)("a",{parentName:"p",href:"https://prettier.io/docs/en/plugins.html"},"plugins"),", which can add new languages or formatting rules. If you choose to add prettier plugins to your setup, special care must be taken to ensure that all of the tooling that might call prettier will be able to load your prettier configuration:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rush prettier")," as configured in the steps above"),(0,i.kt)("li",{parentName:"ul"},"Editors (VSCode, Webstorm, Sublime, etc.) that are configured to format on save"),(0,i.kt)("li",{parentName:"ul"},"Jest and heft test, which use prettier to format snapshots")),(0,i.kt)("p",null,"Here's an example, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"prettier-plugin-packagejson")," plugin:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"First, add the plugin package to your autoinstaller ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file -- if configured as above,\nthis will be ",(0,i.kt)("inlineCode",{parentName:"p"},"common/autoinstallers/rush-prettier/package.json"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "prettier-plugin-packagejson": "^2.2.18"\n  }\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update your autoinstaller's lockfile:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rush update-autoinstaller --name rush-prettier\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the ",(0,i.kt)("em",{parentName:"p"},"full path")," of your plugin folder to the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," array in ",(0,i.kt)("inlineCode",{parentName:"p"},".prettierrc.js"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = {\n  // ... your other configuration goes here ...\n  // ,\n\n  plugins: ['./common/autoinstallers/rush-prettier/node_modules/prettier-plugin-packagejson']\n};\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Commit your autoinstaller and prettierrc changes."))),(0,i.kt)("p",null,"Note that after pulling this change, local developers will need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"rush prettier")," at least once to install the updated autoinstaller -- otherwise, their format-on-save functions and jest snapshot formatting may stop working. In practice this will fix itself after they perform at least one git commit and run the git hooks, but it may be worth notifying your team any time you do update prettier plugins this way."))}d.isMDXComponent=!0}}]);