"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[3173],{158:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(9122),r=n(2501),o=(n(6393),n(158)),i=["components"],l={title:"Selecting subsets of projects"},s=void 0,p={unversionedId:"pages/developer/selecting_subsets",id:"pages/developer/selecting_subsets",title:"Selecting subsets of projects",description:"Bulk commands like rush build and rush rebuild operate on",source:"@site/docs/pages/developer/selecting_subsets.md",sourceDirName:"pages/developer",slug:"/pages/developer/selecting_subsets",permalink:"/pages/developer/selecting_subsets",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/developer/selecting_subsets.md",tags:[],version:"current",frontMatter:{title:"Selecting subsets of projects"},sidebar:"docsSidebar",previous:{title:"Configuring tab completion",permalink:"/pages/developer/tab_completion"},next:{title:"Using project tags",permalink:"/pages/developer/project_tags"}},c={},d=[{value:"Selection parameters",id:"selection-parameters",level:2},{value:"--to",id:"--to",level:3},{value:"--to-except",id:"--to-except",level:3},{value:"--from",id:"--from",level:3},{value:"--impacted-by (unsafe)",id:"--impacted-by-unsafe",level:3},{value:"--impacted-by-except (unsafe)",id:"--impacted-by-except-unsafe",level:3},{value:"--only (unsafe)",id:"--only-unsafe",level:3},{value:"Selectors",id:"selectors",level:2},{value:"Project name",id:"project-name",level:3},{value:"Current folder: <code>.</code>",id:"current-folder-",level:3},{value:"Modified projects: <code>git:</code>",id:"modified-projects-git",level:3},{value:"Tagged projects: <code>tag:</code>",id:"tagged-projects-tag",level:3},{value:"Combining parameters",id:"combining-parameters",level:2},{value:"See also",id:"see-also",level:2}],m={toc:d},u="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/pages/maintainer/custom_commands"},"Bulk commands")," like ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rush rebuild")," operate on\nall projects in the monorepo by default. This becomes expensive as you accumulate more and more projects.\nTo speed things up, Rush provides a set of command-line parameters for selecting subsets of projects."),(0,o.kt)("p",null,"Suppose we're working with the following collection of Rush projects:"),(0,o.kt)("img",{src:"/images/docs/selection-intro.svg",alt:"a sample monorepo",style:{height:"150px"}}),(0,o.kt)("p",null,"In the above illustration, the circles represent local projects, not external NPM dependencies.\nThe arrow from ",(0,o.kt)("inlineCode",{parentName:"p"},"D")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," indicates that ",(0,o.kt)("inlineCode",{parentName:"p"},"D")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"C"),"; this means that ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," must be built before\n",(0,o.kt)("inlineCode",{parentName:"p"},"D")," can be built. We'll use the ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build")," command in the examples given below, but these same parameters\nwork for any bulk command."),(0,o.kt)("h2",{id:"selection-parameters"},"Selection parameters"),(0,o.kt)("h3",{id:"--to"},"-","-to"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," Suppose that you have just cloned your monorepo, and now you want to start working\non project ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),". You need to build all the things that ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," depends on, and also ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," itself."),(0,o.kt)("p",null,"Here's how to do that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build everything up to (and including) project B\nrush build --to B\n")),(0,o.kt)("p",null,"The projects selected by this command are ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),":"),(0,o.kt)("img",{src:"/images/docs/selection-to.svg",alt:"rush build --to B",style:{height:"150px"}}),(0,o.kt)("h3",{id:"--to-except"},"-","-to-except"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," In many cases we do not need ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build")," to process ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),', because our next step\nwill be to invoke Webpack or Jest in "watch mode" for ',(0,o.kt)("inlineCode",{parentName:"p"},"B"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"--to-except")," instead\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"--to")," to exclude ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build everything up to project B, but not B itself\nrush build --to-except B\n\n# Invoke Jest watch mode to build B\nheft test --watch\n")),(0,o.kt)("p",null,"The projects selected by this command are ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),":"),(0,o.kt)("img",{src:"/images/docs/selection-to-except.svg",alt:"rush build --to-except B",style:{height:"150px"}}),(0,o.kt)("h3",{id:"--from"},"-","-from"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," Now that we've finished making our changes to ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),", we want to build the downstream\nprojects ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"D")," to make sure their tests were not broken by our change. In order to build ",(0,o.kt)("inlineCode",{parentName:"p"},"D"),",\nwe also need to include its dependency ",(0,o.kt)("inlineCode",{parentName:"p"},"G"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"--from")," command does this. It will also include ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),"\nsince they're required by ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),". (Since ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build")," is incremental, ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," will probably get skipped assuming\nthey are still up to date.)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build everything downstream from B, including any implied dependencies\nrush build --from B\n")),(0,o.kt)("p",null,"This command selects everything except for ",(0,o.kt)("inlineCode",{parentName:"p"},"F"),":"),(0,o.kt)("img",{src:"/images/docs/selection-from.svg",alt:"rush build --from B",style:{height:"150px"}}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Compatibility note:")," If the ",(0,o.kt)("inlineCode",{parentName:"p"},"rushVersion")," setting in your ",(0,o.kt)("strong",{parentName:"p"},"rush.json")," is older than 5.38.0,\nthen ",(0,o.kt)("inlineCode",{parentName:"p"},"--from")," will instead behave like ",(0,o.kt)("inlineCode",{parentName:"p"},"--impacted-by"),". The meaning was changed in Rush 5.38.0 because\nmost users expected ",(0,o.kt)("inlineCode",{parentName:"p"},"--from")," to include dependencies.")),(0,o.kt)("h3",{id:"--impacted-by-unsafe"},"-","-impacted-by (unsafe)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," Suppose that while working on ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," we made some changes to ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build"),"\nincremental analysis assumes that any change to ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," requires all its downstream dependents to be rebuilt,\nincluding ",(0,o.kt)("inlineCode",{parentName:"p"},"F")," for example. That can be a big set. Maybe you know better -- perhaps you later reverted your change\nin ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),", or maybe you manually invoked the toolchain so ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," is in good shape, or maybe your change to ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," is\nnot relevant right now."),(0,o.kt)("p",null,"In these situations the ",(0,o.kt)("inlineCode",{parentName:"p"},"--impacted-by")," parameter can be handy: It means ",(0,o.kt)("em",{parentName:"p"},'"Select only those projects\nthat might be broken by a change to B, and trust me that their dependencies are in a usable state."')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build B and everything downstream from B, but don't include dependencies\nrush build --impacted-by B\n")),(0,o.kt)("p",null,"The projects selected by this command are ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"C"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"D"),":"),(0,o.kt)("img",{src:"/images/docs/selection-impact.svg",alt:"rush build --impacted-by B",style:{height:"150px"}}),(0,o.kt)("h3",{id:"--impacted-by-except-unsafe"},"-","-impacted-by-except (unsafe)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," This is the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"--impacted-by")," except that it does not include ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," itself. For example\nthat might make sense if you already built ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," manually while implementing the thing that we now want to test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build everything downstream from B, but don't include dependencies\nrush build --impacted-by-except B\n")),(0,o.kt)("p",null,"The projects selected by this command are ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"D"),":"),(0,o.kt)("img",{src:"/images/docs/selection-impact-except.svg",alt:"rush build --impacted-by-except B",style:{height:"150px"}}),(0,o.kt)("h3",{id:"--only-unsafe"},"-","-only (unsafe)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible scenario:")," As its name implies, the ",(0,o.kt)("inlineCode",{parentName:"p"},"--only")," parameter adds exactly one project to the selection,\nignoring dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build only B and nothing else\nrush build --only B\n")),(0,o.kt)("img",{src:"/images/docs/selection-only.svg",alt:"rush build --only B",style:{height:"150px"}}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--only")," parameter is most useful when combined with other parameters. For example, in our narrative above\nwhen we did ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build --impacted-by B"),", maybe we had not actually built ",(0,o.kt)("inlineCode",{parentName:"p"},"G")," yet. We can include it by\ndoing ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build --impacted-by B --only G"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},'"Unsafe" parameters:')," The parameters ",(0,o.kt)("inlineCode",{parentName:"p"},"--only"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--impacted-by"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"--impacted-by-except")," can all fail if the\nrequired dependencies are not built. These three parameters save time by assuming that you know better than Rush\nabout what really needs to be built. If that assumption is incorrect, you can always do ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build")," to get back\nto a good state.")),(0,o.kt)("h2",{id:"selectors"},"Selectors"),(0,o.kt)("p",null,"When you use a ",(0,o.kt)("strong",{parentName:"p"},"selection parameter")," such as ",(0,o.kt)("inlineCode",{parentName:"p"},"rush build --to X"),", the argument ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," is called a ",(0,o.kt)("strong",{parentName:"p"},"selector"),".\nIn the discussion above, we assumed that the selector was always the name of a single Rush project.\nRush supports a variety of other selector syntaxes, some of which can refer to more than one Rush project."),(0,o.kt)("h3",{id:"project-name"},"Project name"),(0,o.kt)("p",null,"The simplest selector is the full name of the Rush project, which is the ",(0,o.kt)("inlineCode",{parentName:"p"},'"name"')," field from ",(0,o.kt)("strong",{parentName:"p"},"package.json"),"."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush build --to @my-company/my-project-name\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush build --from @my-company/my-project-name\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush list --impacted-by @my-company/my-project-name\n")),(0,o.kt)("p",null,"If the package name includes an NPM scope such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@my-company"),", Rush allows you to omit the scope for brevity\n(as long as the unscoped name is not used by some other project in your workspace)."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush build --to my-project-name\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush build --from my-project-name\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush list --impacted-by my-project-name\n")),(0,o.kt)("p",null,"Generally the disk folder of ",(0,o.kt)("inlineCode",{parentName:"p"},"@my-company/my-project-name")," would also be called ",(0,o.kt)("inlineCode",{parentName:"p"},"my-project-name"),",\na practice which we strongly recommend to avoid confusion. It is important to understand that this selector\nis NOT matching the disk folder."),(0,o.kt)("h3",{id:"current-folder-"},"Current folder: ",(0,o.kt)("inlineCode",{parentName:"h3"},".")),(0,o.kt)("p",null,"The folder containing a Rush project's ",(0,o.kt)("strong",{parentName:"p"},"package.json")," file is called the ",(0,o.kt)("strong",{parentName:"p"},"project folder"),". If your\nshell's current working directory is somewhere under a project folder, then the selector ",(0,o.kt)("inlineCode",{parentName:"p"},".")," provides\na convenient shorthand for referring to that project."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cd my-project-name\n\n# Build "@my-company/my-project-name" whose package.json\n# is in the current working directory\nrush build --to .\n\ncd src\n\n# The "." selector can also be resolved from a subfolder\n# such as my-project-name/src\nrush list --to-except .\n')),(0,o.kt)("h3",{id:"modified-projects-git"},"Modified projects: ",(0,o.kt)("inlineCode",{parentName:"h3"},"git:")),(0,o.kt)("p",null,"By providing a ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection"},"Git reference")," expression\n(branch, tag, or commit hash), you can select all projects with modifications since the corresponding commit.\nThis type of query uses similar logic as the ",(0,o.kt)("inlineCode",{parentName:"p"},"rush change")," command: Rush calculates the ",(0,o.kt)("inlineCode",{parentName:"p"},"git diff")," of the\ncurrent working directory versus the referenced commit, then computes a list of affected file paths.\nThese file paths are then matched with project folders from your ",(0,o.kt)("strong",{parentName:"p"},"rush.json")," workspace: In this way,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"git:")," selector identifies the set of Rush projects with at least one modified file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Select projects whose source code has been changed according to Git,\n# using the "main" branch as the basis for comparison.\n# Build "--to" those projects and their dependencies.\nrush build --to git:origin/main\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Select projects whose source code has been changed since\n# the Git tag named "release/v3.0.0".\n# List the downstream projects that would be "impacted by" these changes.\nrush list --impacted-by git:release/v3.0.0\n')),(0,o.kt)("h3",{id:"tagged-projects-tag"},"Tagged projects: ",(0,o.kt)("inlineCode",{parentName:"h3"},"tag:")),(0,o.kt)("p",null,"Rush ",(0,o.kt)("a",{parentName:"p",href:"/pages/developer/project_tags"},"project tags")," enable you to define arbitrary collections of projects,\nwhich can then be referenced using the ",(0,o.kt)("inlineCode",{parentName:"p"},"tag:")," selector."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Build all projects that were tagged with the "shipping" project tag.\nrush build --to tag:shipping\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Print a report showing the set of projects\n# that have the "frontend-team-libs" project tag.\nrush list --only tag:frontend-team-libs --detailed\n')),(0,o.kt)("h2",{id:"combining-parameters"},"Combining parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can combine any of the selection parameters on a single command line. The result is always the union of each\nindividual selection."),(0,o.kt)("li",{parentName:"ul"},"The same parameter can be specified multiple times. For example: ",(0,o.kt)("inlineCode",{parentName:"li"},"rush build --only A --only B --only C"),"\nwill select ",(0,o.kt)("inlineCode",{parentName:"li"},"A"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"B"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"C")),(0,o.kt)("li",{parentName:"ul"},"Note that Rush does not provide any parameter that would reduce the selection. This is an intentional design choice;\nin ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/rushstack/issues/1241"},"#1241")," we'll implement personal tags for building up more\ncomplex selections.)")),(0,o.kt)("p",null,"Here's a more complex combined command-line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rush build --only A --impacted-by-except B --to F\n")),(0,o.kt)("p",null,"The projects selected by this example are ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"D"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"F"),":"),(0,o.kt)("img",{src:"/images/docs/selection-multi.svg",alt:"rush build --only A --impacted-by-except B --to F",style:{height:"150px"}}),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/advanced/incremental_builds"},"Incremental builds")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/advanced/watch_mode"},"Using watch mode")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/developer/project_tags"},"Using project tags")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/commands/rush_build"},"rush build")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/commands/rush_rebuild"},"rush rebuild"))))}h.isMDXComponent=!0}}]);