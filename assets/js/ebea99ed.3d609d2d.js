"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[7651],{158:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(6393);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||s;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var r=t(9122),a=t(2501),s=(t(6393),t(158)),o=["components"],i={title:"rush update"},l=void 0,u={unversionedId:"pages/commands/rush_update",id:"pages/commands/rush_update",title:"rush update",description:"See also",source:"@site/docs/pages/commands/rush_update.md",sourceDirName:"pages/commands",slug:"/pages/commands/rush_update",permalink:"/pages/commands/rush_update",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/commands/rush_update.md",tags:[],version:"current",frontMatter:{title:"rush update"},sidebar:"docsSidebar",previous:{title:"rush unlink",permalink:"/pages/commands/rush_unlink"},next:{title:"rush update-autoinstaller",permalink:"/pages/commands/rush_update-autoinstaller"}},p={},c=[{value:"See also",id:"see-also",level:2}],h={toc:c},d="wrapper";function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,s.kt)(d,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'usage: rush update [-h] [-p] [--bypass-policy] [--no-link]\n                   [--network-concurrency COUNT] [--debug-package-manager]\n                   [--max-install-attempts NUMBER] [--ignore-hooks]\n                   [--variant VARIANT] [--full] [--recheck]\n\n\nThe "rush update" command installs the dependencies described in your package.\njson files, and updates the shrinkwrap file as needed. (This "shrinkwrap"\nfile stores a central inventory of all dependencies and versions for projects\nin your repo. It is found in the "common/config/rush" folder.) Note that Rush\nalways performs a single install for all projects in your repo. You should\nrun "rush update" whenever you start working in a Rush repo, after you pull\nfrom Git, and after you modify a package.json file. If there is nothing to do,\n "rush update" is instantaneous. NOTE: In certain cases "rush install" should\nbe used instead of "rush update" -- for details, see the command help for\n"rush install".\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -p, --purge           Perform "rush purge" before starting the installation\n  --bypass-policy       Overrides enforcement of the "gitPolicy" rules from\n                        rush.json (use honorably!)\n  --no-link             If "--no-link" is specified, then project symlinks\n                        will NOT be created after the installation completes.\n                        You will need to run "rush link" manually. This flag\n                        is useful for automated builds that want to report\n                        stages individually or perform extra operations in\n                        between the two stages. This flag is not supported\n                        when using workspaces.\n  --network-concurrency COUNT\n                        If specified, limits the maximum number of concurrent\n                        network requests. This is useful when troubleshooting\n                        network failures.\n  --debug-package-manager\n                        Activates verbose logging for the package manager.\n                        You will probably want to pipe the output of Rush to\n                        a file when using this command.\n  --max-install-attempts NUMBER\n                        Overrides the default maximum number of install\n                        attempts. The default value is 1.\n  --ignore-hooks        Skips execution of the "eventHooks" scripts defined\n                        in rush.json. Make sure you know what you are\n                        skipping.\n  --variant VARIANT     Run command using a variant installation\n                        configuration. This parameter may alternatively be\n                        specified via the RUSH_VARIANT environment variable.\n  --full                Normally "rush update" tries to preserve your\n                        existing installed versions and only makes the\n                        minimum updates needed to satisfy the package.json\n                        files. This conservative approach prevents your PR\n                        from getting involved with package updates that are\n                        unrelated to your work. Use "--full" when you really\n                        want to update all dependencies to the latest\n                        SemVer-compatible version. This should be done\n                        periodically by a person or robot whose role is to\n                        deal with potential upgrade regressions.\n  --recheck             If the shrinkwrap file appears to already satisfy the\n                        package.json files, then "rush update" will skip\n                        invoking the package manager at all. In certain\n                        situations this heuristic may be inaccurate. Use the\n                        "--recheck" flag to force the package manager to\n                        process the shrinkwrap file. This will also update\n                        your shrinkwrap file with Rush\'s fixups. (To minimize\n                        shrinkwrap churn, these fixups are normally performed\n                        only in the temporary folder.)\n')),(0,s.kt)("h2",{id:"see-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/pages/commands/rush_install"},"rush install"))))}m.isMDXComponent=!0}}]);